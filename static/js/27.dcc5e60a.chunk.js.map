{"version":3,"sources":["cache/db.ts","cache/useCache.ts","cache/collections.ts","pages/Main/MyProgress/index.tsx"],"names":["db","Localbase","config","debug","toJson","success","msg","data","message","useCache","collection","obj","a","add","saved","key","label","trim","toLowerCase","doc","get","id","update","updated","set","delete","removed","value","toUpperCase","keys","list","found","Collections","VERBS","verbs","NOUNS","nouns","ADJECTIVES","adjectives","ADVERBS","adverbs","PHRASALVERBS","phrasalVerb","LINKERS","linkers","length","JSON","stringify","IDIOMS","NOTES","TENSES","TOPICS","QA","TODOS","phrasalVerbs","idioms","notes","tenses","topics","qa","todos","save","saveByKey","findOneAndUpdate","setById","findOneAndDelete","drop","init","find","findOne","getStatistics","getDatetoStore","USERS","THINGS","GAMES","pieConfig","backgroundColor","borderColor","borderWidth","InitialData","labels","datasets","MyProgress","useState","setData","useEffect","then","res","className","style","maxHeight","height","type","options","maintainAspectRatio"],"mappings":"6yBAGIA,EAAK,I,OAAIC,GAAU,YAEvBD,EAAGE,OAAOC,OAAQ,EAEHH,QCHTI,EAAS,SAACC,EAAkBC,EAAaC,GAC3C,MAAO,CACHC,QAASF,EACTD,UACAE,SA4JOE,EAxJE,SAACC,GAAuB,4CAErC,WAAqBC,GAArB,eAAAC,EAAA,+EAE4BZ,EAAGU,WAAWA,GAAYG,IAAIF,GAF1D,cAEcG,EAFd,yBAGeV,GAAO,EAAM,4BAA6BU,IAHzD,yDAMeV,GAAO,EAAO,qBAN7B,0DAFqC,kEAYrC,WAA0BO,EAAUI,GAApC,iBAAAH,EAAA,sEAEcI,EAAQL,EAAIK,MAAMC,OAAOC,cAFvC,SAG4BlB,EAAGU,WAAWA,GAAYS,IAAI,CAACH,UAAQI,MAHnE,2DAKmBhB,GAAO,EAAD,mBAAoBY,EAApB,sBALzB,uBAO4BhB,EAAGU,WAAWA,GAAYG,IAA1B,2BACbF,GADa,IAEhBK,MAAOA,IACRD,GAVX,cAOcD,EAPd,yBAWeV,GAAO,EAAM,4BAA6BU,IAXzD,2DAceV,GAAO,EAAO,iCAd7B,2DAZqC,kEA8BrC,WAAiCO,EAAUU,GAA3C,eAAAT,EAAA,+EAE8BZ,EAAGU,WAAWA,GAAYS,IAAI,CAACE,OAAKC,OAApC,2BACfX,GADe,IAElBK,MAAOL,EAAIK,MAAMC,OAAOC,iBAJpC,cAEcK,EAFd,yBAMenB,GAAO,EAAM,8BAA+BmB,IAN3D,yDASenB,GAAO,EAAO,qBAT7B,0DA9BqC,kEA2CrC,WAAwBO,EAAUU,GAAlC,eAAAT,EAAA,+EAE0BZ,EAAGU,WAAWA,GAAYS,IAAI,CAACE,OAAKG,IAAIb,GAFlE,cAEcQ,EAFd,yBAGef,GAAO,EAAM,iCAAkCe,IAH9D,yDAMef,GAAO,EAAO,wBAN7B,0DA3CqC,kEAqDrC,WAAiCiB,GAAjC,eAAAT,EAAA,+EAE8BZ,EAAGU,WAAWA,GAAYS,IAAI,CAACE,OAAKI,SAFlE,cAEcC,EAFd,yBAGetB,GAAO,EAAM,8BAA+BsB,IAH3D,yDAMetB,GAAO,EAAO,qBAN7B,0DArDqC,kEA+DrC,sBAAAQ,EAAA,+EAEcZ,EAAGU,WAAWA,GAAYe,SAFxC,gCAGerB,GAAO,EAAM,0CAH5B,yDAMeA,GAAO,EAAO,qBAN7B,yDA/DqC,kEAyErC,WAAqBW,EAAaY,GAAlC,SAAAf,EAAA,+EAEcZ,EAAGU,WAAWK,EAAIa,eAAeJ,IAAIG,EAAO,CAAEE,MAAM,IAFlE,0HAzEqC,kEAkFrC,4BAAAjB,EAAA,+EAE2BZ,EAAGU,WAAWA,GAAYU,MAFrD,cAEcU,EAFd,yBAGe1B,GAAO,EAAM,eAAgB0B,IAH5C,yDAMe1B,GAAO,EAAO,kBAN7B,0DAlFqC,kEA4FrC,WAAwBiB,GAAxB,eAAAT,EAAA,+EAE4BZ,EAAGU,WAAWA,GAAYS,IAAI,CAACE,OAAKD,MAFhE,cAEcW,EAFd,yBAGe3B,GAAO,EAAM,kBAAmB2B,IAH/C,yDAMe3B,GAAO,EAAO,kBAN7B,0DA5FqC,kEAsGrC,sCAAAQ,EAAA,+EAE4BZ,EAAGU,WAAWsB,EAAYC,OAAOb,MAF7D,cAEcc,EAFd,gBAG4BlC,EAAGU,WAAWsB,EAAYG,OAAOf,MAH7D,cAGcgB,EAHd,gBAIiCpC,EAAGU,WAAWsB,EAAYK,YAAYjB,MAJvE,cAIckB,EAJd,iBAK8BtC,EAAGU,WAAWsB,EAAYO,SAASnB,MALjE,eAKcoB,EALd,iBAMkCxC,EAAGU,WAAWsB,EAAYS,cAAcrB,MAN1E,eAMcsB,EANd,iBAO8B1C,EAAGU,WAAWsB,EAAYW,SAASvB,MAPjE,eAOcwB,EAPd,yBASexC,GAAO,EAAM,iBAAkB,CAAC8B,EAAMW,OAAQT,EAAMS,OAAQP,EAAWO,OAAQL,EAAQK,OAAQH,EAAYG,OAAQD,EAAQC,UAT1I,wGAtGqC,kEAsHrC,sBAAAjC,EAAA,kEAGekC,KAHf,SAGoC9C,EAAGU,WAAWsB,EAAYC,OAAOb,MAHrE,oCAGoB2B,UAHpB,qBAIeD,KAJf,SAIoC9C,EAAGU,WAAWsB,EAAYG,OAAOf,MAJrE,oCAIoB2B,UAJpB,qBAKoBD,KALpB,UAKyC9C,EAAGU,WAAWsB,EAAYK,YAAYjB,MAL/E,qCAKyB2B,UALzB,qBAMiBD,KANjB,UAMsC9C,EAAGU,WAAWsB,EAAYO,SAASnB,MANzE,uCAMsB2B,UANtB,uBAOsBD,KAPtB,UAO2C9C,EAAGU,WAAWsB,EAAYS,cAAcrB,MAPnF,wCAO2B2B,UAP3B,wBAQiBD,KARjB,UAQsC9C,EAAGU,WAAWsB,EAAYW,SAASvB,MARzE,wCAQsB2B,UARtB,wBASgBD,KAThB,UASqC9C,EAAGU,WAAWsB,EAAYgB,QAAQ5B,MATvE,wCASqB2B,UATrB,wBAUeD,KAVf,UAUoC9C,EAAGU,WAAWsB,EAAYiB,OAAO7B,MAVrE,wCAUoB2B,UAVpB,wBAWgBD,KAXhB,UAWqC9C,EAAGU,WAAWsB,EAAYkB,QAAQ9B,MAXvE,wCAWqB2B,UAXrB,wBAYgBD,KAZhB,UAYqC9C,EAAGU,WAAWsB,EAAYmB,QAAQ/B,MAZvE,wCAYqB2B,UAZrB,wBAaYD,KAbZ,UAaiC9C,EAAGU,WAAWsB,EAAYoB,IAAIhC,MAb/D,wCAaiB2B,UAbjB,wBAceD,KAdf,UAcoC9C,EAAGU,WAAWsB,EAAYqB,OAAOjC,MAdrE,wCAcoB2B,UAdpB,qCAGQb,MAHR,KAIQE,MAJR,KAKQE,WALR,KAMQE,QANR,MAOQc,aAPR,MAQQV,QARR,MASQW,OATR,MAUQC,MAVR,MAWQC,OAXR,MAYQC,OAZR,MAaQC,GAbR,MAcQC,MAdR,qDAtHqC,sBAyIrC,MAAO,CACHC,KA1IkC,SAAD,mCA2IjCC,UA3IiC,8CA4IjCC,iBA5IiC,8CA6IjCC,QA7IiC,8CA8IjCC,iBA9IiC,4CA+IjCC,KA/IiC,2CAgJjCC,KAhJiC,8CAiJjCC,KAjJiC,2CAkJjCC,QAlJiC,4CAmJjCC,cAnJiC,2CAoJjCC,eApJiC,6CCZ5BC,EAAQ,QACrBvC,EAAQ,QACRI,EAAa,aACbE,EAAU,UACVJ,EAAQ,QACRM,EAAe,eACfE,EAAU,UACVQ,EAAS,SACTsB,EAAS,SACTxB,EAAQ,QACRD,EAAS,SACTE,EAAS,SACTwB,EAAQ,QACRtB,EAAK,KACLC,EAAQ,S,mGCVJsB,EAAY,CACZ3D,MAAO,aACP4D,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEFC,YAAa,CACX,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEFC,YAAa,GAEbC,EAAc,CACdC,OAAQ,CAAC,QAAS,QAAS,aAAc,UAAW,gBAAiB,WACrEC,SAAU,CAAC,2BAEJN,GAFG,IAGNpE,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,OAqCf2E,UAhCc,WAAO,IACxBZ,EAAkB7D,YAAS,IAA3B6D,cADuB,EAEPa,mBAASJ,GAFF,mBAExBxE,EAFwB,KAElB6E,EAFkB,KAsB/B,OAlBAC,qBAAU,WACNf,IAAgBgB,MAAK,SAACC,GACfA,EAAIlF,SACH+E,EACI,CACIJ,OAAQ,CAAC,QAAS,QAAS,aAAc,UAAW,gBAAiB,WACrEC,SAAU,CAAC,2BAEJN,GAFG,IAGNpE,KAAK,YAAKgF,EAAIhF,gBAOnC,IAGC,sBAAKiF,UAAU,8BAA8BC,MAAQ,CAACC,UAAW,SAAjE,UACI,6CACA,qBAAKD,MAAQ,CAACE,OAAQ,SAAtB,SACK,cAAC,IAAD,CAAKpF,KAAMA,EAAMqF,KAAK,MAAMC,QAAS,CAAEC,qBAAqB","file":"static/js/27.dcc5e60a.chunk.js","sourcesContent":["// @ts-ignore\r\nimport Localbase from 'localbase';\r\n\r\nlet db = new Localbase('remindMe');\r\n\r\ndb.config.debug = false\r\n\r\nexport default db;","import { Collections } from \".\";\r\nimport { BackupDataModel, CustomResponse } from \"../model/app.model\";\r\nimport db from './db';\r\n\r\nconst toJson = (success: boolean, msg: string, data?: any): CustomResponse => {\r\n    return {\r\n        message: msg,\r\n        success,\r\n        data\r\n    };\r\n};\r\n\r\nconst useCache = (collection: string) => {\r\n\r\n    async function save (obj: any): Promise<CustomResponse> {\r\n        try{\r\n            const saved = await db.collection(collection).add(obj);\r\n            return toJson(true, 'New record has been added', saved);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to create');\r\n        }\r\n    };\r\n\r\n    async function saveByKey (obj: any, key: string): Promise<CustomResponse> {\r\n        try{\r\n            const label = obj.label.trim().toLowerCase();\r\n            const found = await db.collection(collection).doc({label}).get();\r\n            if(found){\r\n                return toJson(false, `The word ${label} already exsist!`);\r\n            }\r\n            const saved = await db.collection(collection).add({\r\n                ...obj, \r\n                label: label\r\n            }, key);\r\n            return toJson(true, 'New record has been added', saved);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to persist a new Word');\r\n        }\r\n    };\r\n\r\n    async function findOneAndUpdate (obj: any, id: string): Promise<CustomResponse> {\r\n        try{\r\n            const updated = await db.collection(collection).doc({id}).update({\r\n                ...obj,\r\n                label: obj.label.trim().toLowerCase()\r\n            });\r\n            return toJson(true, 'New record has been updated', updated);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to update');\r\n        }\r\n    };\r\n\r\n    async function setById (obj: any, id: string): Promise<CustomResponse> {\r\n        try{\r\n            const doc = await db.collection(collection).doc({id}).set(obj);\r\n            return toJson(true, 'New record has been overwrited', doc);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to overwrite');\r\n        }\r\n    };\r\n\r\n    async function findOneAndDelete (id: string): Promise<CustomResponse> {\r\n        try{\r\n            const removed = await db.collection(collection).doc({id}).delete();\r\n            return toJson(true, 'New record has been removed', removed);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to remove');\r\n        }\r\n    };\r\n\r\n    async function drop (): Promise<CustomResponse> {\r\n        try{\r\n            await db.collection(collection).delete();\r\n            return toJson(true, 'The whole collection has been removed');\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to remove');\r\n        }\r\n    };\r\n\r\n    async function init (key: string, value: any[]): Promise<void> {\r\n        try{\r\n            await db.collection(key.toUpperCase()).set(value, { keys: true });\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    async function find (): Promise<CustomResponse> {\r\n        try{\r\n            const list = await db.collection(collection).get();\r\n            return toJson(true, 'list of data', list);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to get');\r\n        }\r\n    };\r\n\r\n    async function findOne (id: string): Promise<CustomResponse> {\r\n        try{\r\n            const found = await db.collection(collection).doc({id}).get();\r\n            return toJson(true, 'find a document', found);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to get');\r\n        }\r\n    };\r\n\r\n    async function getStatistics (): Promise<CustomResponse> {\r\n        try{\r\n            const verbs = await db.collection(Collections.VERBS).get();\r\n            const nouns = await db.collection(Collections.NOUNS).get();\r\n            const adjectives = await db.collection(Collections.ADJECTIVES).get();\r\n            const adverbs = await db.collection(Collections.ADVERBS).get();\r\n            const phrasalVerb = await db.collection(Collections.PHRASALVERBS).get();\r\n            const linkers = await db.collection(Collections.LINKERS).get();\r\n\r\n            return toJson(true, 'get Statistics', [verbs.length, nouns.length, adjectives.length, adverbs.length, phrasalVerb.length, linkers.length]);\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async function getDatetoStore(): Promise<BackupDataModel>{\r\n\r\n        return {\r\n            verbs: JSON.stringify(await db.collection(Collections.VERBS).get()),\r\n            nouns: JSON.stringify(await db.collection(Collections.NOUNS).get()),\r\n            adjectives: JSON.stringify(await db.collection(Collections.ADJECTIVES).get()),\r\n            adverbs: JSON.stringify(await db.collection(Collections.ADVERBS).get()),\r\n            phrasalVerbs: JSON.stringify(await db.collection(Collections.PHRASALVERBS).get()),\r\n            linkers: JSON.stringify(await db.collection(Collections.LINKERS).get()),\r\n            idioms: JSON.stringify(await db.collection(Collections.IDIOMS).get()),\r\n            notes: JSON.stringify(await db.collection(Collections.NOTES).get()),\r\n            tenses: JSON.stringify(await db.collection(Collections.TENSES).get()),\r\n            topics: JSON.stringify(await db.collection(Collections.TOPICS).get()),\r\n            qa: JSON.stringify(await db.collection(Collections.QA).get()),\r\n            todos: JSON.stringify(await db.collection(Collections.TODOS).get()),\r\n        };\r\n    }\r\n\r\n\r\n    return {\r\n        save,\r\n        saveByKey,\r\n        findOneAndUpdate,\r\n        setById,\r\n        findOneAndDelete,\r\n        drop,\r\n        init,\r\n        find,\r\n        findOne,\r\n        getStatistics,\r\n        getDatetoStore\r\n    }\r\n}\r\n\r\nexport default useCache;","export const USERS = \"USERS\",\r\nVERBS = \"VERBS\",\r\nADJECTIVES = \"ADJECTIVES\",\r\nADVERBS = \"ADVERBS\",\r\nNOUNS = \"NOUNS\",\r\nPHRASALVERBS = \"PHRASALVERBS\",\r\nLINKERS = \"LINKERS\",\r\nTOPICS = \"TOPICS\",\r\nTHINGS = \"THINGS\",\r\nNOTES = \"NOTES\",\r\nIDIOMS = \"IDIOMS\",\r\nTENSES = \"TENSES\",\r\nGAMES = \"GAMES\",\r\nQA = \"QA\",\r\nTODOS = \"TODOS\";","import React, {useEffect, useState} from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { useCache } from '../../../cache';\r\n\r\nlet pieConfig = {\r\n    label: '# of Votes',\r\n    backgroundColor: [\r\n      'rgba(255, 99, 132, 0.2)',\r\n      'rgba(54, 162, 235, 0.2)',\r\n      'rgba(255, 206, 86, 0.2)',\r\n      'rgba(75, 192, 192, 0.2)',\r\n      'rgba(153, 102, 255, 0.2)',\r\n      'rgba(255, 159, 64, 0.2)',\r\n    ],\r\n    borderColor: [\r\n      'rgba(255, 99, 132, 1)',\r\n      'rgba(54, 162, 235, 1)',\r\n      'rgba(255, 206, 86, 1)',\r\n      'rgba(75, 192, 192, 1)',\r\n      'rgba(153, 102, 255, 1)',\r\n      'rgba(255, 159, 64, 1)',\r\n    ],\r\n    borderWidth: 1,\r\n}\r\nlet InitialData = {\r\n    labels: ['Verbs', 'Nouns', 'Adjectives', 'Adverbs', 'Phrasal Verbs', 'Linkers'],\r\n    datasets: [\r\n      {\r\n        ...pieConfig,\r\n        data: [0, 0, 0, 0, 0, 0],\r\n      },\r\n    ],\r\n};\r\n\r\nconst MyProgress: React.FC = () => {\r\n    const { getStatistics } = useCache('');\r\n    const [data, setData] = useState(InitialData);\r\n\r\n    useEffect(()=> {\r\n        getStatistics().then((res)=> {\r\n            if(res.success){\r\n                setData(\r\n                    {\r\n                        labels: ['Verbs', 'Nouns', 'Adjectives', 'Adverbs', 'Phrasal Verbs', 'Linkers'],\r\n                        datasets: [\r\n                          {\r\n                            ...pieConfig,\r\n                            data: [...res.data],\r\n                          },\r\n                        ], \r\n                    }\r\n                )\r\n            }\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"border bg-light p-3 rounded\" style= {{maxHeight: '500px'}}>\r\n            <h6>My progress</h6>\r\n            <div style= {{height: '400px'}}>\r\n                 <Pie data={data} type=\"pie\" options={{ maintainAspectRatio: false }} />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyProgress;\r\n"],"sourceRoot":""}