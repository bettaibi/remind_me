{"version":3,"sources":["components/Snackbar/index.tsx","cache/db.ts","cache/useCache.ts","cache/collections.ts","../node_modules/react-bootstrap/esm/Button.js","firebase/useFirestore/index.ts","pages/Main/Backup/index.tsx"],"names":["SnackbarContainer","isShown","message","type","title","Portal","document","getElementById","ReactDOM","createPortal","className","show","variant","style","zIndex","useSnackbar","useState","snackbar","setSnackbar","showMsg","msg","setTimeout","Snackbar","useCallback","db","Localbase","config","debug","toJson","success","data","useCache","collection","obj","a","add","saved","key","label","trim","toLowerCase","doc","get","id","update","updated","set","delete","removed","value","toUpperCase","keys","list","found","Collections","VERBS","verbs","NOUNS","nouns","ADJECTIVES","adjectives","ADVERBS","adverbs","PHRASALVERBS","phrasalVerb","LINKERS","linkers","length","JSON","stringify","IDIOMS","NOTES","TENSES","TOPICS","QA","TODOS","phrasalVerbs","idioms","notes","tenses","topics","qa","todos","save","saveByKey","findOneAndUpdate","setById","findOneAndDelete","drop","init","find","findOne","getStatistics","getDatetoStore","USERS","THINGS","GAMES","Button","React","forwardRef","_ref","ref","bsPrefix","size","active","block","as","props","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","classes","classNames","href","createElement","SafeAnchor","_extends","disabled","Component","displayName","defaultProps","useFireStore","firestore","payload","dates","getStoredData","updateDates","getlastBackupDates","updateStoredData","defaultData","code","mySecret","process","schema","yup","shape","required","min","max","oneOf","CodeSecret","mergedAt","uploadedAt","mergeData","resetForm","window","confirm","then","exists","catch","err","uploadData","dataModel","Date","now","console","log","Fragment","validationSchema","onSubmit","values","initialValues","handleBlur","handleSubmit","handleChange","errors","touched","handleReset","Form","Group","Control","autoComplete","placeholder","name","onChange","onBlur","isInvalid","Feedback","onClick","Backup","setUploadedAt","setmergedAt","user","useSharedContext","uid","useEffect","getdates","toLocaleDateString"],"mappings":"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","file":"static/js/25.55a55cb2.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\ntype snackbarType = \"info\" | \"danger\" | \"warning\" | \"success\";\r\n\r\ninterface SnackbarState {\r\n    title: string;\r\n    isShown: boolean;\r\n    message: string;\r\n    type?: snackbarType\r\n}\r\n\r\nconst SnackbarContainer: React.FC<SnackbarState> = ({ isShown, message, type, title }) => {\r\n    const Portal: any = document.getElementById('portal');\r\n\r\n    return (\r\n        ReactDOM.createPortal(\r\n                <Alert className=\"m-3 fixed-top\" show={isShown} variant={type} style={{zIndex: 9999999999}}>\r\n                    <h5>{title}</h5>\r\n                    <p className=\"m-0\">\r\n                        {message}\r\n                    </p>\r\n                </Alert>,\r\n            Portal\r\n        )\r\n    )\r\n}\r\n\r\nexport const useSnackbar = () => {\r\n    const [snackbar, setSnackbar] = useState<SnackbarState>({title: '', isShown: false, message: '', type: 'success' });\r\n\r\n    const showMsg = (title: string, msg: string, type?: snackbarType) => {\r\n        setSnackbar({ isShown: true, message: msg, title, type: type || 'success' });\r\n\r\n        setTimeout(()=>{\r\n            setSnackbar({...snackbar, isShown: false });\r\n        }, 3000);\r\n    }\r\n\r\n    const Snackbar = useCallback(\r\n        () => (\r\n            <SnackbarContainer\r\n                message={snackbar.message}\r\n                isShown={snackbar.isShown}\r\n                type={snackbar.type}\r\n                title = {snackbar.title}\r\n            />\r\n        ),\r\n        [snackbar]\r\n    )\r\n\r\n    return {\r\n        showMsg,\r\n        Snackbar\r\n    }\r\n\r\n}\r\n","// @ts-ignore\r\nimport Localbase from 'localbase';\r\n\r\nlet db = new Localbase('remindMe');\r\n\r\ndb.config.debug = false\r\n\r\nexport default db;","import { Collections } from \".\";\r\nimport { BackupDataModel, CustomResponse } from \"../model/app.model\";\r\nimport db from './db';\r\n\r\nconst toJson = (success: boolean, msg: string, data?: any): CustomResponse => {\r\n    return {\r\n        message: msg,\r\n        success,\r\n        data\r\n    };\r\n};\r\n\r\nconst useCache = (collection: string) => {\r\n\r\n    async function save (obj: any): Promise<CustomResponse> {\r\n        try{\r\n            const saved = await db.collection(collection).add(obj);\r\n            return toJson(true, 'New record has been added', saved);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to create');\r\n        }\r\n    };\r\n\r\n    async function saveByKey (obj: any, key: string): Promise<CustomResponse> {\r\n        try{\r\n            const label = obj.label.trim().toLowerCase();\r\n            const found = await db.collection(collection).doc({label}).get();\r\n            if(found){\r\n                return toJson(false, `The word ${label} already exsist!`);\r\n            }\r\n            const saved = await db.collection(collection).add({\r\n                ...obj, \r\n                label: label\r\n            }, key);\r\n            return toJson(true, 'New record has been added', saved);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to persist a new Word');\r\n        }\r\n    };\r\n\r\n    async function findOneAndUpdate (obj: any, id: string): Promise<CustomResponse> {\r\n        try{\r\n            const updated = await db.collection(collection).doc({id}).update({\r\n                ...obj,\r\n                label: obj.label.trim().toLowerCase()\r\n            });\r\n            return toJson(true, 'New record has been updated', updated);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to update');\r\n        }\r\n    };\r\n\r\n    async function setById (obj: any, id: string): Promise<CustomResponse> {\r\n        try{\r\n            const doc = await db.collection(collection).doc({id}).set(obj);\r\n            return toJson(true, 'New record has been overwrited', doc);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to overwrite');\r\n        }\r\n    };\r\n\r\n    async function findOneAndDelete (id: string): Promise<CustomResponse> {\r\n        try{\r\n            const removed = await db.collection(collection).doc({id}).delete();\r\n            return toJson(true, 'New record has been removed', removed);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to remove');\r\n        }\r\n    };\r\n\r\n    async function drop (): Promise<CustomResponse> {\r\n        try{\r\n            await db.collection(collection).delete();\r\n            return toJson(true, 'The whole collection has been removed');\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to remove');\r\n        }\r\n    };\r\n\r\n    async function init (key: string, value: any[]): Promise<void> {\r\n        try{\r\n            await db.collection(key.toUpperCase()).set(value, { keys: true });\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    async function find (): Promise<CustomResponse> {\r\n        try{\r\n            const list = await db.collection(collection).get();\r\n            return toJson(true, 'list of data', list);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to get');\r\n        }\r\n    };\r\n\r\n    async function findOne (id: string): Promise<CustomResponse> {\r\n        try{\r\n            const found = await db.collection(collection).doc({id}).get();\r\n            return toJson(true, 'find a document', found);\r\n        }\r\n        catch(err){\r\n            return toJson(false, 'Failed to get');\r\n        }\r\n    };\r\n\r\n    async function getStatistics (): Promise<CustomResponse> {\r\n        try{\r\n            const verbs = await db.collection(Collections.VERBS).get();\r\n            const nouns = await db.collection(Collections.NOUNS).get();\r\n            const adjectives = await db.collection(Collections.ADJECTIVES).get();\r\n            const adverbs = await db.collection(Collections.ADVERBS).get();\r\n            const phrasalVerb = await db.collection(Collections.PHRASALVERBS).get();\r\n            const linkers = await db.collection(Collections.LINKERS).get();\r\n\r\n            return toJson(true, 'get Statistics', [verbs.length, nouns.length, adjectives.length, adverbs.length, phrasalVerb.length, linkers.length]);\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async function getDatetoStore(): Promise<BackupDataModel>{\r\n\r\n        return {\r\n            verbs: JSON.stringify(await db.collection(Collections.VERBS).get()),\r\n            nouns: JSON.stringify(await db.collection(Collections.NOUNS).get()),\r\n            adjectives: JSON.stringify(await db.collection(Collections.ADJECTIVES).get()),\r\n            adverbs: JSON.stringify(await db.collection(Collections.ADVERBS).get()),\r\n            phrasalVerbs: JSON.stringify(await db.collection(Collections.PHRASALVERBS).get()),\r\n            linkers: JSON.stringify(await db.collection(Collections.LINKERS).get()),\r\n            idioms: JSON.stringify(await db.collection(Collections.IDIOMS).get()),\r\n            notes: JSON.stringify(await db.collection(Collections.NOTES).get()),\r\n            tenses: JSON.stringify(await db.collection(Collections.TENSES).get()),\r\n            topics: JSON.stringify(await db.collection(Collections.TOPICS).get()),\r\n            qa: JSON.stringify(await db.collection(Collections.QA).get()),\r\n            todos: JSON.stringify(await db.collection(Collections.TODOS).get()),\r\n        };\r\n    }\r\n\r\n\r\n    return {\r\n        save,\r\n        saveByKey,\r\n        findOneAndUpdate,\r\n        setById,\r\n        findOneAndDelete,\r\n        drop,\r\n        init,\r\n        find,\r\n        findOne,\r\n        getStatistics,\r\n        getDatetoStore\r\n    }\r\n}\r\n\r\nexport default useCache;","export const USERS = \"USERS\",\r\nVERBS = \"VERBS\",\r\nADJECTIVES = \"ADJECTIVES\",\r\nADVERBS = \"ADVERBS\",\r\nNOUNS = \"NOUNS\",\r\nPHRASALVERBS = \"PHRASALVERBS\",\r\nLINKERS = \"LINKERS\",\r\nTOPICS = \"TOPICS\",\r\nTHINGS = \"THINGS\",\r\nNOTES = \"NOTES\",\r\nIDIOMS = \"IDIOMS\",\r\nTENSES = \"TENSES\",\r\nGAMES = \"GAMES\",\r\nQA = \"QA\",\r\nTODOS = \"TODOS\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport SafeAnchor from './SafeAnchor';\nvar defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nvar Button = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      size = _ref.size,\n      active = _ref.active,\n      className = _ref.className,\n      block = _ref.block,\n      type = _ref.type,\n      as = _ref.as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"size\", \"active\", \"className\", \"block\", \"type\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  var classes = classNames(className, prefix, active && 'active', variant && prefix + \"-\" + variant, block && prefix + \"-block\", size && prefix + \"-\" + size);\n\n  if (props.href) {\n    return /*#__PURE__*/React.createElement(SafeAnchor, _extends({}, props, {\n      as: as,\n      ref: ref,\n      className: classNames(classes, props.disabled && 'disabled')\n    }));\n  }\n\n  if (ref) {\n    props.ref = ref;\n  }\n\n  if (type) {\n    props.type = type;\n  } else if (!as) {\n    props.type = 'button';\n  }\n\n  var Component = as || 'button';\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    className: classes\n  }));\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import { BackupDataModel, BackupDatesModel } from '../../model/app.model';\r\nimport { firestore } from '../firebase';\r\n\r\nexport const useFireStore = () => {\r\n\r\n    async function getStoredData(key: string){\r\n       try{\r\n        const data = await firestore.collection(key).doc('storedData').get();\r\n        return data;\r\n       }\r\n       catch(err){\r\n           throw err;\r\n       }\r\n    }\r\n\r\n    async function updateStoredData(key: string, payload: BackupDataModel){\r\n        try{\r\n            return await firestore.collection(key).doc('storedData').set(payload);\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async function getlastBackupDates(key: string){\r\n        try{\r\n            const dates = await firestore.collection(key).doc('dates').get();\r\n            return dates;\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async function updateDates(key: string, payload: BackupDatesModel){\r\n        try{\r\n            return await firestore.collection(key).doc('dates').set(payload);\r\n        }\r\n        catch(err){\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return {\r\n        getStoredData,\r\n        updateDates,\r\n        getlastBackupDates,\r\n        updateStoredData\r\n    }\r\n};","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Form\r\n} from 'react-bootstrap';\r\nimport * as yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { useSharedContext } from '../../../Context';\r\nimport { useFireStore } from '../../../firebase/useFirestore';\r\nimport { BackupDataModel } from '../../../model/app.model';\r\nimport { useCache } from '../../../cache';\r\nimport { useSnackbar } from '../../../components/Snackbar';\r\n\r\nconst defaultData = { code: '' };\r\nconst mySecret = process.env.REACT_APP_SECRET_CODE;\r\n\r\nconst schema = yup.object().shape({\r\n    code: yup.string().required('This field is required').min(10, 'Code secret must has 10 letters')\r\n        .max(10, 'Code secret must has 10 letters').oneOf([mySecret], 'Secret code mismatch')\r\n});\r\n\r\nconst Backup: React.FC = () => {\r\n    const [uploadedAt, setUploadedAt] = useState(null);\r\n    const [mergedAt, setmergedAt] = useState(null);\r\n    const { user } = useSharedContext();\r\n    const { getlastBackupDates } = useFireStore();\r\n\r\n    useEffect(() => {\r\n        getdates();\r\n    }, []);\r\n\r\n    async function getdates() {\r\n        try {\r\n            const doc = await getlastBackupDates(user.uid);\r\n            if (doc.exists) {\r\n                setUploadedAt(doc.data()?.uploadedAt || null);\r\n                setmergedAt(doc.data()?.mergedAt || null);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-light p-3 border rounded\">\r\n            <h6>Backup Setting</h6>\r\n            <p>\r\n                All your data are stored <b className=\"text-info\">locally</b> on your device, use a <b className=\"text-info\">backup</b> file to share your local data between several devices.<br />\r\n                Data are only stored on your devices. Without an existing backup file the access to your restoring data is <b className=\"text-danger\">not possible.</b> <br />\r\n                <b className=\"text-dark\">Merge Data</b> to update your current saved data with the latest backup stored file. <br />\r\n                <strong className=\"text-primary\">Upload Data</strong> in order to generate a new backup file and store it on the server. <br />\r\n                <span className=\"d-flex flex-column mt-1\">\r\n                    <small className=\"text-secondary\"> Latest Merge: {uploadedAt ? new Date(uploadedAt || '').toLocaleDateString(\"en-us\") : 'Not mention'}</small>\r\n                    <small className=\"text-secondary\"> Latest Upload: {mergedAt ? new Date(mergedAt || '').toLocaleDateString(\"en-us\") : 'No file found'}</small>\r\n                </span>\r\n\r\n            </p>\r\n            < CodeSecret id={user.uid} uploadedAt={uploadedAt} mergedAt={mergedAt} />\r\n        </div>\r\n    )\r\n};\r\n\r\ninterface CodeSecretProps {\r\n    id: string;\r\n    uploadedAt: number | null;\r\n    mergedAt: number | null;\r\n}\r\nconst CodeSecret: React.FC<CodeSecretProps> = ({ id, uploadedAt, mergedAt }) => {\r\n    const { getDatetoStore, init } = useCache('');\r\n    const { updateStoredData, updateDates, getStoredData } = useFireStore();\r\n    const { Snackbar, showMsg } = useSnackbar();\r\n\r\n    const mergeData = async (resetForm: () => void) => {\r\n        const result = window.confirm('Merge a new Data, confirm?');\r\n        if (result) {\r\n            try {\r\n                getStoredData(id).then(async (doc) => {\r\n                    if (doc.exists) {\r\n                        // for await (const [key, value] of Object.entries(Object(doc.data()))) {\r\n                        //     let arrayData = JSON.parse(String(value));\r\n                        //     arrayData = arrayData.map((item: any) => {\r\n                        //         return { ...item, _key: item.id };\r\n                        //     });\r\n                        //     await init(key, arrayData);\r\n                        // }\r\n                        // updateDates(id, {uploadedAt, mergedAt: Date.now()}).then(()=> {\r\n                        //     showMsg('Success', 'your data is successfully merged', 'success');\r\n                        //     resetForm();\r\n                        // }).catch(err => {\r\n                        //     showMsg('Failure', err.message, 'warning');\r\n                        // });\r\n\r\n                    }\r\n                    else {\r\n                        showMsg('Failure', 'Failed to reach data from the server', 'warning');\r\n                    }\r\n                }).catch(err => {\r\n                    showMsg('Failure', err.message, 'warning');\r\n                });\r\n            }\r\n            catch (err) {\r\n                showMsg('Failure', 'Failed to merge data', 'warning');\r\n            }\r\n        }\r\n    };\r\n\r\n    const uploadData = async (resetForm: () => void) => {\r\n        const result = window.confirm('Upload a new copy into the server, confirm?');\r\n        if (result) {\r\n            try {\r\n                const dataModel: BackupDataModel = await getDatetoStore();\r\n                updateStoredData(id, dataModel).then(() => {\r\n                    updateDates(id, { uploadedAt: Date.now(), mergedAt }).then(() => {\r\n                        showMsg('Success', 'A new copy is uploaded', 'success');\r\n                        resetForm();\r\n                    }).catch(err => {\r\n                        showMsg('Failure', err.message, 'warning');\r\n                    });\r\n                }).catch(err => {\r\n                    console.log(err.message)\r\n                    showMsg('Failure', err.message, 'warning');\r\n                });\r\n            }\r\n            catch (err) {\r\n                showMsg('Failure', 'Failed to upload data', 'warning');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik validationSchema={schema} onSubmit={(values) => console.log(values)}\r\n                initialValues={defaultData}>\r\n                {\r\n                    ({ handleBlur, handleSubmit, handleChange, values, errors, touched, handleReset }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group>\r\n                                <Form.Control autoComplete=\"off\" size=\"sm\" placeholder=\"Enter the secret code\" name=\"code\"\r\n                                    onChange={handleChange} onBlur={handleBlur} value={values.code}\r\n                                    isInvalid={touched.code && !!errors.code} />\r\n\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    {errors.code}\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>\r\n                            <div className=\"text-right mt-3\">\r\n                                <Button size=\"sm\" variant=\"dark\" className=\"mr-2\" onClick={() => mergeData(handleReset)}\r\n                                    disabled={values.code !== mySecret}>Merge Data</Button>\r\n                                <Button size=\"sm\" variant=\"primary\" onClick={() => uploadData(handleReset)}\r\n                                    disabled={values.code !== mySecret}>Upload data</Button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n            <Snackbar />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Backup;\r\n"],"sourceRoot":""}